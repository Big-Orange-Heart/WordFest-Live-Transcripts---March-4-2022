1
00:00:58,035 --> 00:01:01,214
Yoast: Do you know, the Yoast SEO,
plugin, they're red, orange, and

2
00:01:01,214 --> 00:01:04,394
green feedback bullets that help
you optimize your posts for the web.

3
00:01:04,575 --> 00:01:06,435
It runs on millions of websites.

4
00:01:06,885 --> 00:01:10,575
We tried to make SEO understandable
and accessible to everyone.

5
00:01:12,375 --> 00:01:12,945
Nexcess: Oh great.

6
00:01:13,095 --> 00:01:14,155
My website crashed.

7
00:01:14,990 --> 00:01:15,590
I give up.

8
00:01:17,870 --> 00:01:19,100
Don't give up on your dreams.

9
00:01:19,100 --> 00:01:20,630
Jordan, who are you?

10
00:01:20,720 --> 00:01:21,230
It's me.

11
00:01:21,770 --> 00:01:23,360
You from the future.

12
00:01:23,660 --> 00:01:25,650
Your professional website
is not out of reach.

13
00:01:25,740 --> 00:01:27,020
You just need Nexcess.

14
00:01:27,530 --> 00:01:30,650
With Nexcess managed hosting, you
Git lightening fast load times

15
00:01:30,650 --> 00:01:34,760
built-in performance monitoring and
updates, and always awesome support.

16
00:01:34,790 --> 00:01:37,580
24 7 365 for all your projects.

17
00:01:37,880 --> 00:01:38,450
Whoa.

18
00:01:38,660 --> 00:01:39,020
Yeah.

19
00:01:42,390 --> 00:01:47,760
Weglot: Discover Weglot the simple
translation solution for your website.

20
00:01:48,120 --> 00:01:52,650
All you have to do is add Weglot to
your website, select the languages

21
00:01:52,650 --> 00:01:54,630
that you need, and that's it.

22
00:01:54,810 --> 00:01:57,960
Your website is now available
in multiple languages.

23
00:01:58,500 --> 00:02:00,930
Bluehost: Who says building
an online store has to be

24
00:02:01,020 --> 00:02:02,760
hard with Bluehost website.

25
00:02:03,305 --> 00:02:04,865
It's more than just easy.

26
00:02:05,075 --> 00:02:07,025
It's tell us your thing and smart AI.

27
00:02:07,025 --> 00:02:08,165
We'll take it from there.

28
00:02:08,165 --> 00:02:10,415
Easy it's WooCommerce friendly.

29
00:02:10,505 --> 00:02:13,765
So you can add one of these,
or swap this for that easy.

30
00:02:13,975 --> 00:02:17,095
It's set up shop in minutes
with unlimited products.

31
00:02:17,125 --> 00:02:17,605
Easy.

32
00:02:17,665 --> 00:02:22,045
Whether you sell boots, books
or bowls, it's create an online

33
00:02:22,045 --> 00:02:41,425
store with Bluehost, easy build
beyond boundaries with Bluehost.

34
00:02:59,095 --> 00:03:02,395
Matt Graham: Welcome one
and all to WordFest Live.

35
00:03:02,785 --> 00:03:08,185
We are just Gitting started with 24 hours
of celebrating the people, the technology

36
00:03:08,605 --> 00:03:10,435
and the Big Orange Heart of WordPress.

37
00:03:11,625 --> 00:03:14,755
Rachel Winchester: WordFest Live not
only delivers a festival educational

38
00:03:14,755 --> 00:03:18,325
content, wellness sessions and
networking opportunities, but it's

39
00:03:18,325 --> 00:03:20,185
also a fundraiser for Big Orange Heart.

40
00:03:20,605 --> 00:03:23,905
Please visit that donate link at any time
to support the mission of our organism.

41
00:03:25,485 --> 00:03:28,745
Matt Graham: WordFest Live as a 24
hour opportunity for the WordPress

42
00:03:28,745 --> 00:03:33,365
community to come together, to feel
less isolated, learn from one another

43
00:03:33,665 --> 00:03:35,135
and be present with each other.

44
00:03:37,115 --> 00:03:40,025
Rachel Winchester: Our first speaker
today is AmyJune Hineline with

45
00:03:40,075 --> 00:03:43,565
Git Into The Groove, moving from
freelance to collaborative workflow.

46
00:03:44,345 --> 00:03:46,895
AmyJune is an active
contributor in the open source.

47
00:03:47,840 --> 00:03:51,350
As the open source community
ambassador, she is uniquely positioned

48
00:03:51,350 --> 00:03:54,230
to help individuals become more
comfortable and confident as they

49
00:03:54,230 --> 00:03:55,670
contribute to their communities.

50
00:03:56,480 --> 00:04:01,100
In addition to her work, building
community connections, AmyJune is an avid

51
00:04:01,100 --> 00:04:06,230
geocasher noted Volkswagen enthusiasts
and eights with her elbows on the table.

52
00:04:10,115 --> 00:04:13,325
AmyJune Hineline: Hi, thanks
for that nice introduction.

53
00:04:13,415 --> 00:04:15,575
Um, I love going first.

54
00:04:15,575 --> 00:04:18,755
It's nice to Git kind of
things out of the way.

55
00:04:18,755 --> 00:04:20,735
There's a little bit of a
hiccup, but that's okay.

56
00:04:20,765 --> 00:04:23,645
That's what happens when
we, um, work in tech, right.

57
00:04:23,645 --> 00:04:24,304
We know that.

58
00:04:24,784 --> 00:04:29,825
Um, so I am going to be talking
about, um, collaborative workflow

59
00:04:30,215 --> 00:04:34,115
and git today, um, all to the, kind
of the theme to the eighties, which

60
00:04:34,115 --> 00:04:35,585
makes it a little bit more fun.

61
00:04:35,975 --> 00:04:38,645
Uh, before I start, I like
to do some housekeeping.

62
00:04:39,785 --> 00:04:43,925
There are images in the slide deck
and I am an accessibility advocate.

63
00:04:43,925 --> 00:04:48,305
So I do understand that some folks
watching or participating today

64
00:04:48,305 --> 00:04:52,565
might not be able to see the visual
assets, if there's any pictures that

65
00:04:52,565 --> 00:05:00,184
add context or are, uh, need to be
explained, I will, uh, I'll I'll explain

66
00:05:00,184 --> 00:05:04,294
those as I go, but some of them are
decorative and I won't describe them.

67
00:05:04,385 --> 00:05:07,684
Um, for the sake of brevity, I
usually include a link to the

68
00:05:07,684 --> 00:05:12,275
slide deck, but I accidentally
put it in a red hat, uh, drive.

69
00:05:12,304 --> 00:05:15,544
So I'm going to redo that
after the presentation and make

70
00:05:15,544 --> 00:05:17,434
those, uh, slides available.

71
00:05:17,434 --> 00:05:18,875
And I'll post those online.

72
00:05:19,655 --> 00:05:19,905
I.

73
00:05:20,840 --> 00:05:24,950
And presenting today, um, on the
Aloni Lands in Northern California.

74
00:05:24,980 --> 00:05:29,600
And I'd like to acknowledge, um,
that I do live on a traditional

75
00:05:29,600 --> 00:05:32,240
ancestral unceded territory.

76
00:05:32,600 --> 00:05:36,590
Uh, it's important to understand the
longstanding history that we all have.

77
00:05:36,620 --> 00:05:37,820
That's brought us to live with.

78
00:05:38,659 --> 00:05:42,830
Um, and land acknowledgements
don't exist in the past tense.

79
00:05:42,890 --> 00:05:48,020
Uh, they are current, uh, colonialism
is an ongoing process and we

80
00:05:48,020 --> 00:05:51,380
need to build our mindfulness,
um, of our present participants.

81
00:05:53,465 --> 00:05:55,195
Uh, my name is AmyJune.

82
00:05:55,535 --> 00:05:57,605
All one word title, camel case.

83
00:05:57,665 --> 00:06:00,095
Uh, my pronouns are she and her.

84
00:06:00,095 --> 00:06:05,685
I'm the senior community manager over at
https://opensource.com and opensource.com

85
00:06:05,715 --> 00:06:07,355
is under the red hat umbrella.

86
00:06:08,415 --> 00:06:12,819
opensource.com is a website dedicated
to sharing information about open

87
00:06:12,819 --> 00:06:14,799
source along with open culture.

88
00:06:15,100 --> 00:06:18,099
If you ever want to write for
opensource.com, you know, Git ahold of

89
00:06:18,159 --> 00:06:20,530
me, um, you can see my links are here.

90
00:06:20,559 --> 00:06:24,100
It's VolkswagenChick across,
you know, LinkedIn and Facebook

91
00:06:24,100 --> 00:06:26,020
and Instagram and Twitter.

92
00:06:26,380 --> 00:06:27,169
Um, I.

93
00:06:28,340 --> 00:06:29,570
I want to acknowledge that.

94
00:06:29,570 --> 00:06:35,599
I really believe in reducing the
barriers to entry for tech, not only

95
00:06:35,599 --> 00:06:40,580
with contributions, but tech in general,
I lead contribution days, um, at the

96
00:06:40,580 --> 00:06:42,979
local regional and national level.

97
00:06:43,310 --> 00:06:48,060
Um, because everyone, uh, can contribute
back to our projects, not just with code.

98
00:06:49,750 --> 00:06:51,070
Here's my friend Spotty.

99
00:06:51,219 --> 00:06:52,180
He lives with me.

100
00:06:52,240 --> 00:06:53,530
Um, you might see him.

101
00:06:53,530 --> 00:06:55,390
So I just want to introduce
him ahead of time.

102
00:06:55,390 --> 00:06:59,290
His long name is Spotty MacSpotsALot,
but we can call them spot for short.

103
00:06:59,320 --> 00:07:02,380
He is named after the star Trek cat.

104
00:07:04,120 --> 00:07:05,830
And what are we going to talk about today?

105
00:07:05,859 --> 00:07:09,969
We'll talk about what it's like in
freelance world versus agency life.

106
00:07:10,000 --> 00:07:13,150
Um, and one of the things that I
really want to concentrate on are

107
00:07:13,150 --> 00:07:16,780
the tools that makes it easier for
us to collaborate with other people.

108
00:07:17,825 --> 00:07:21,754
That's version control, but I'll
also talk about, uh,git clients,

109
00:07:21,815 --> 00:07:23,884
um, uh, local environments.

110
00:07:23,915 --> 00:07:29,614
And I do have up here that I'll do a demo
if slack, if time permits, but I do talk

111
00:07:29,614 --> 00:07:31,744
a lot, so that doesn't usually happen.

112
00:07:34,774 --> 00:07:39,305
Moving to agency from freelance
has definitely has its advantage.

113
00:07:39,335 --> 00:07:42,469
Um, What are some of the
things we love about freelance?

114
00:07:42,620 --> 00:07:45,920
We love the freedom that
working alone gives us, you

115
00:07:45,920 --> 00:07:47,390
know, we work at our own time.

116
00:07:47,390 --> 00:07:48,140
At any time.

117
00:07:48,140 --> 00:07:51,320
We don't have to worry about
bothering a team and pinging them

118
00:07:51,320 --> 00:07:53,900
or emailing them in the middle of
the night when we Git up, because

119
00:07:53,900 --> 00:07:55,880
we have a revelation about our code.

120
00:07:56,990 --> 00:08:04,384
But along with that freedom, Come some
difficulties too, you know, uh, there's

121
00:08:04,384 --> 00:08:06,754
no one around to bounce ideas off of.

122
00:08:06,785 --> 00:08:08,795
There's no one to help
you with code review.

123
00:08:08,825 --> 00:08:12,185
There's no one to help you
with any sort of conflicts.

124
00:08:12,515 --> 00:08:15,484
Um, sometimes you just do what
you need to do to Git the job

125
00:08:15,515 --> 00:08:20,374
done, and it can be detrimental
to not have that accountability.

126
00:08:20,374 --> 00:08:23,344
Sometimes I like to equate
it to the wild, wild west.

127
00:08:24,830 --> 00:08:27,590
Because we're juggling all the
roles, you know, you're the person

128
00:08:27,590 --> 00:08:29,780
in charge of absolutely everything.

129
00:08:29,989 --> 00:08:33,980
You're the project manager, you're
doing quality assurance and, you

130
00:08:33,980 --> 00:08:36,559
know, a user experience, QA and UX.

131
00:08:36,950 --> 00:08:41,030
Uh you're you're the designer,
you're the product owner.

132
00:08:41,030 --> 00:08:42,649
You're all of those things.

133
00:08:44,635 --> 00:08:48,775
But many of the advantages that came
with freelance work historically has

134
00:08:48,775 --> 00:08:52,885
started to be encompassed into agency
life with the onset of the pandemic.

135
00:08:52,915 --> 00:08:57,025
You know, um, we see companies
and agencies moving to more,

136
00:08:57,085 --> 00:08:58,765
uh, remote friendly conditions.

137
00:08:58,765 --> 00:09:00,415
We're not going into the office as much.

138
00:09:00,625 --> 00:09:07,285
And we're also being more inclusive about
time zones these days, and teamwork offers

139
00:09:07,285 --> 00:09:11,815
diversity of thought and diversity of.

140
00:09:12,575 --> 00:09:17,165
Creativity, having a team around
having that team environment,

141
00:09:17,405 --> 00:09:21,514
everyone brainstorms together, which
in turns really increases problem

142
00:09:21,514 --> 00:09:26,345
solving and we're more efficient and
effective at arriving at solutions.

143
00:09:26,915 --> 00:09:34,474
Effective teams also allow more
room for innovation, uh, in turn

144
00:09:34,504 --> 00:09:38,794
it creates, you know, a competitive
edge, you know, uh, there's uh,

145
00:09:39,710 --> 00:09:44,630
Accomplishing goals and objectives,
uh, uh, objectives, you know, sharing

146
00:09:44,780 --> 00:09:50,270
differing opinions and experiences really
strengthens and holds us accountable.

147
00:09:50,300 --> 00:09:54,500
You know, we can make decisions
faster and team effort increases, you

148
00:09:54,500 --> 00:09:59,450
know, um, you can do the, you can do
the stages of designing, planning,

149
00:09:59,480 --> 00:10:04,150
implement implementation, and much more
effectively when a team is there to help.

150
00:10:06,419 --> 00:10:10,199
And also working in a traditional
full-time web development role at an

151
00:10:10,199 --> 00:10:15,149
established company or agency can give
us the opportunity for more structured

152
00:10:15,149 --> 00:10:17,369
learning, you know, and free learning.

153
00:10:17,369 --> 00:10:20,399
You know, we have professional
development budGit that we can rely on.

154
00:10:20,760 --> 00:10:26,579
Um, plus we have everyday exposure
to experts and mentors and best

155
00:10:26,579 --> 00:10:32,159
practices that you don't always
Git as a freelancer or maybe.

156
00:10:33,185 --> 00:10:35,375
There's a barrier because of cost.

157
00:10:38,185 --> 00:10:42,055
When you're on your own, you assume every
role, like I said, on a team, there's a

158
00:10:42,055 --> 00:10:46,464
place for everyone to contribute based on
the roles and their specific skill sets.

159
00:10:46,464 --> 00:10:51,085
And this really adds accountability in the
forms of checks and balances on a team.

160
00:10:51,085 --> 00:10:54,565
You know, we have those project
managers, they help assign tasks

161
00:10:54,954 --> 00:10:58,224
and they act as in-betweens for
developers and stakeholders, they

162
00:10:58,224 --> 00:11:02,665
help translate jargon and find out
what specifically needed tickets

163
00:11:02,665 --> 00:11:04,345
are submitted and they're assigned.

164
00:11:05,300 --> 00:11:09,230
Um, developers and
designers work on the tasks.

165
00:11:09,230 --> 00:11:14,089
And then, you know, they're collaborative,
which leads to improvement and more ideas.

166
00:11:14,360 --> 00:11:17,420
There are technical leads
that help us merge code and

167
00:11:17,420 --> 00:11:19,040
settle conflicts in our code.

168
00:11:19,520 --> 00:11:21,800
And then after changes in
conflicts are resolved.

169
00:11:21,800 --> 00:11:25,250
We have folks who perform that
user testing for us and the quality

170
00:11:25,250 --> 00:11:27,110
assurance and regression testing.

171
00:11:27,349 --> 00:11:29,839
You know, when we write the
code, we really shouldn't.

172
00:11:29,930 --> 00:11:32,704
Um, Be reviewing our own code.

173
00:11:33,214 --> 00:11:36,694
Um, and then after the pro, after that,
the project manager takes over again

174
00:11:36,694 --> 00:11:40,264
and decides if the changes are ready
for the stakeholders and it's a rinse

175
00:11:40,264 --> 00:11:47,474
and repeat, and it's so much easier
within a team code, workflow management

176
00:11:47,744 --> 00:11:53,655
becomes a great deal easier when we have
tools in place like version control.

177
00:11:55,535 --> 00:12:02,135
Version control is a system that records
changes to a file set or a set of files

178
00:12:02,135 --> 00:12:07,954
over time so that we can go back and we
can recall those specific versions later.

179
00:12:08,135 --> 00:12:13,444
So this is more about the code
workflow management version

180
00:12:13,444 --> 00:12:17,734
controls are a category of software
tools that help a software team.

181
00:12:19,385 --> 00:12:24,155
Manage changes to the source code over
time, uh, version control, software

182
00:12:24,155 --> 00:12:29,405
tracks, every single modification to
the code and a special kind of database.

183
00:12:30,005 --> 00:12:34,234
Uh, if mistakes are made developers
and project managers can turn back

184
00:12:34,234 --> 00:12:38,315
time and make comparisons to earlier
versions of the code to help really

185
00:12:38,315 --> 00:12:42,454
remedy any mistakes or blunders without
a lot of downtime for the whole team.

186
00:12:45,200 --> 00:12:48,829
What are some of the requirements
for implementing version control?

187
00:12:48,829 --> 00:12:55,010
Because there are some prerequisites first
you need a computer equipped for the task.

188
00:12:55,040 --> 00:12:56,599
You want to make sure we install.

189
00:12:56,599 --> 00:12:57,440
Git locally.

190
00:12:58,265 --> 00:13:03,185
Or globally, you know, even if it's
already installed, which may be, it

191
00:13:03,185 --> 00:13:06,575
could, it could be installed because
maybe you have dev tools already

192
00:13:06,575 --> 00:13:10,415
installed, but it's always a good
idea to update to that latest version.

193
00:13:10,415 --> 00:13:13,565
And this can be done, you know,
through a package or another

194
00:13:13,565 --> 00:13:17,495
installer, or you can download the
source code and compile it yourself.

195
00:13:17,525 --> 00:13:18,795
If you're confident enough to do.

196
00:13:20,950 --> 00:13:24,760
And then also basic knowledge
of the command line.

197
00:13:24,819 --> 00:13:28,300
If you're a beginner, a Git client
can be used, but you should really

198
00:13:28,300 --> 00:13:32,349
be acquainted with some of that basic
command line knowledge, not a lot, but

199
00:13:32,349 --> 00:13:35,889
it really helps to know what's going
on behind the scenes of the client.

200
00:13:35,889 --> 00:13:36,790
When you use one.

201
00:13:39,605 --> 00:13:42,935
And there are graphical user
interfaces for the command line.

202
00:13:42,935 --> 00:13:47,435
Sometimes we hear them called gooeys,
you know, GUI graphical user interfaces.

203
00:13:47,704 --> 00:13:50,645
And I want to introduce this concept
because in the next few slides,

204
00:13:50,645 --> 00:13:52,565
I have some images for reference.

205
00:13:52,984 --> 00:13:58,095
Um, and after I introduced the commands,
um, what they look like in the Git

206
00:13:58,115 --> 00:14:03,365
client and the client simplifies the
commands into buttons and drop downs and

207
00:14:03,365 --> 00:14:05,525
window, um, interfaces for the workers.

208
00:14:07,575 --> 00:14:09,764
This is an image of a client.

209
00:14:09,764 --> 00:14:13,724
You know, we're looking at the
source tree and a log across the top.

210
00:14:13,754 --> 00:14:16,875
You can see there's some
buttons down the sides.

211
00:14:16,875 --> 00:14:18,045
There's more buttons.

212
00:14:18,345 --> 00:14:20,204
Uh, some of them aren't available.

213
00:14:20,204 --> 00:14:24,075
If there's nothing to do, for example,
um, the merge button across the top

214
00:14:24,075 --> 00:14:27,885
in the middle, um, it's grayed out
because there's nothing currently

215
00:14:27,885 --> 00:14:31,784
to merge, but the checkout, the
ad branch, the cherry pick, the

216
00:14:31,784 --> 00:14:33,675
revert functions are all available.

217
00:14:34,399 --> 00:14:38,780
And along the left side, there's
checkboxes to add branches, um, uh,

218
00:14:39,050 --> 00:14:44,540
tags, you know, you can view those
the source tree, um, and then across

219
00:14:44,540 --> 00:14:50,149
the, you know, the very, the very, uh,
left side, there are, you can choose

220
00:14:50,149 --> 00:14:51,829
what files are open in the log when.

221
00:14:53,060 --> 00:14:56,149
And there are a lot
ofgit clients available.

222
00:14:56,149 --> 00:15:00,500
Some are free, others are not, some
have free versions with limited access.

223
00:15:00,500 --> 00:15:02,960
Others are free with full access.

224
00:15:03,440 --> 00:15:07,460
Some free versions only allow us to
work on repositories that are public.

225
00:15:07,490 --> 00:15:10,760
So that can be limiting sometimes
if our client's code bases are

226
00:15:10,760 --> 00:15:12,589
private or have limited access.

227
00:15:12,859 --> 00:15:15,770
So make sure you do your homework,
you know, try some out, make sure

228
00:15:15,770 --> 00:15:17,270
they have features that you need.

229
00:15:18,480 --> 00:15:21,869
And then something to be aware of
too, is sometimes agencies have shared

230
00:15:21,869 --> 00:15:25,170
licenses and would like everyone to
use the same client, because that

231
00:15:25,170 --> 00:15:28,109
makes troubleshooting a little bit
easier when everyone's using the same.

232
00:15:30,605 --> 00:15:34,835
Many developers, developers turn to
integrated development environment.

233
00:15:34,865 --> 00:15:39,694
Those are IDEs for short, um,
integrated development environments.

234
00:15:40,054 --> 00:15:44,524
And most of these, um, IDE clients,
uh, they have a learning curve.

235
00:15:44,615 --> 00:15:47,734
Um, so sometimes the IDE
might not be accessible for

236
00:15:47,734 --> 00:15:49,565
you but much likegit clients.

237
00:15:49,565 --> 00:15:51,754
Some are free, some have trials and some.

238
00:15:53,379 --> 00:15:56,500
And some agencies again, like
have everyone use the same tool,

239
00:15:56,500 --> 00:16:00,099
so make sure your machine can
handle the load of running an IDE.

240
00:16:00,579 --> 00:16:05,290
Uh, sometimes the combination of having
some applications open can affect

241
00:16:05,290 --> 00:16:07,329
runtime and really slow down the machine.

242
00:16:07,750 --> 00:16:11,980
I know until I started working with a
stronger machine, if I had Docker open

243
00:16:12,010 --> 00:16:15,520
with a complicated spreadsheet with
like lots of things going on in that.

244
00:16:16,430 --> 00:16:19,940
And then if I turn on my slack and
then, oh my gosh, if I had zoom

245
00:16:19,940 --> 00:16:23,420
on my machine would really start
whining and the fan would spin up.

246
00:16:23,599 --> 00:16:27,920
Um, so be mindful of, you know, how,
how, how much workload it takes to

247
00:16:27,920 --> 00:16:29,569
run some of these things altogether.

248
00:16:31,760 --> 00:16:36,980
So why Git and not
subversion or another tool?

249
00:16:38,714 --> 00:16:41,714
A lot of us use Git, because
Git, has become the industry

250
00:16:41,714 --> 00:16:43,635
standard for web development.

251
00:16:43,694 --> 00:16:48,135
It has a very rich set of commands
for tracking cloning and workflows.

252
00:16:48,464 --> 00:16:53,234
And many of these basics can be carried
through to other versioning workflows.

253
00:16:54,405 --> 00:16:57,314
So here's where my eighties
references start to come into play.

254
00:16:57,375 --> 00:16:59,444
Um, forgive me ahead of time.

255
00:17:01,040 --> 00:17:03,140
We have never going to Git you up.

256
00:17:03,200 --> 00:17:04,800
I'm never going to Git you down.

257
00:17:04,849 --> 00:17:08,659
So we're going to start talking
about some basics of Git, um, I have

258
00:17:08,659 --> 00:17:11,929
some listed here, but we're going
to go into most of them in a little

259
00:17:11,929 --> 00:17:13,879
bit, but, um, we have Git in it.

260
00:17:14,240 --> 00:17:15,800
Uh, it starts a new repository.

261
00:17:16,000 --> 00:17:19,774
Git status is my absolute
favorite command.

262
00:17:20,044 --> 00:17:22,864
It will list all of the files
that have been changed and

263
00:17:22,864 --> 00:17:24,094
are waiting to be committed.

264
00:17:24,304 --> 00:17:27,694
It's a good command to run
before running any other command.

265
00:17:27,694 --> 00:17:29,584
And maybe that's why my
faith it's my favorite.

266
00:17:29,584 --> 00:17:30,695
Cause I do it the most.

267
00:17:30,995 --> 00:17:32,495
Um, it works is.

268
00:17:33,870 --> 00:17:36,209
It reminds you of what
you've been working on.

269
00:17:36,689 --> 00:17:40,350
There's branching that lists all the
local branches in your current repository.

270
00:17:40,379 --> 00:17:44,939
You can also visually indicate what
branch or what branch you're currently on.

271
00:17:44,939 --> 00:17:47,999
And depending on how you have your
terminal, you know, it might be

272
00:17:47,999 --> 00:17:50,039
highlighted green or have an asterisked.

273
00:17:50,699 --> 00:17:56,745
Git diff shows the file differences,
which are not yet staged.

274
00:17:56,745 --> 00:17:57,614
Git logged.

275
00:17:57,675 --> 00:18:02,145
This command is used to list, uh, the
version history of the current branch.

276
00:18:02,145 --> 00:18:05,955
You're on Git push since the
committed branches of our main

277
00:18:05,955 --> 00:18:07,965
branch to our remote repositories.

278
00:18:08,175 --> 00:18:10,965
Again, I'm going to be talking about
these in depth in a little bit.

279
00:18:11,264 --> 00:18:12,185
Um, so don't feel over.

280
00:18:12,565 --> 00:18:16,840
Git pull fetches and merges,
you know, changes to your remote

281
00:18:16,840 --> 00:18:18,249
server on your working directory.

282
00:18:18,249 --> 00:18:19,120
Git add.

283
00:18:19,389 --> 00:18:21,939
That's where we add our files
that we've been working on.

284
00:18:21,999 --> 00:18:25,689
Um, we put them in a staging
area, Git commit, actually commits

285
00:18:25,689 --> 00:18:28,090
those changes, um, Git merged.

286
00:18:28,120 --> 00:18:31,580
This is when we're working with others
and we merge our workflows together.

287
00:18:33,289 --> 00:18:36,560
So let's Git into the groove and talk
a little bit about working locally.

288
00:18:36,590 --> 00:18:40,639
This means on your machine and
not in the browser or in a cloud.

289
00:18:42,379 --> 00:18:46,820
So the basics of working locally,
one of those main commands that we

290
00:18:46,820 --> 00:18:49,129
want to talk about is Git clone.

291
00:18:49,790 --> 00:18:51,290
It creates a working copy.

292
00:18:53,344 --> 00:18:55,985
Of a, of a repository
locally on your machine.

293
00:18:55,985 --> 00:18:59,705
And from there you start making
your changes, um, Git remote.

294
00:18:59,854 --> 00:19:04,445
If you haven't connected yet to your
local repository, to a remote server,

295
00:19:04,864 --> 00:19:08,524
um, you add the server, so you're
able to push it, your changes up.

296
00:19:08,764 --> 00:19:12,395
And this is used when you have
created initialized a code base

297
00:19:12,405 --> 00:19:15,185
locally first, when we talked
about that, Git in it to me.

298
00:19:16,084 --> 00:19:16,895
Git pull.

299
00:19:16,925 --> 00:19:19,415
And I'm going to talk about this
almost through every workflow.

300
00:19:19,955 --> 00:19:23,374
It's when your code is somewhere
else and it might be different from

301
00:19:23,374 --> 00:19:27,334
your current work, you know, fetch
and merge changes on the remote

302
00:19:27,334 --> 00:19:29,044
server to your working directory.

303
00:19:29,945 --> 00:19:32,074
Again, I'm going to talk
about this command a lot.

304
00:19:32,074 --> 00:19:34,864
It really helps keep you up to
date with what other people are

305
00:19:34,864 --> 00:19:37,085
working on much, like Git status.

306
00:19:37,085 --> 00:19:38,854
I almost do a Git poll with everything.

307
00:19:40,649 --> 00:19:41,669
And here's a shot of that.

308
00:19:41,669 --> 00:19:46,169
Git client, you know, while we're
cloning, it's a very intuitive interface.

309
00:19:46,169 --> 00:19:49,320
I'm not going to say easy because
easy is a relative term, but

310
00:19:49,320 --> 00:19:50,639
it's pretty straightforward.

311
00:19:50,999 --> 00:19:55,739
Um, you enter the URL where the code
base lives and you push a button.

312
00:19:56,129 --> 00:19:59,729
And most of our repositories online
that we share with each other, have

313
00:19:59,729 --> 00:20:03,389
this information readily available
in their dashboard or in their read

314
00:20:03,389 --> 00:20:05,429
me files of how to set it up locally.

315
00:20:09,419 --> 00:20:11,010
So let's talk about branching.

316
00:20:11,070 --> 00:20:14,129
Um, we don't want to make
changes to the shared code base.

317
00:20:14,129 --> 00:20:19,679
So we want to create branches that
mirror the code and, and we want

318
00:20:19,679 --> 00:20:21,030
to work on those other branches.

319
00:20:21,030 --> 00:20:23,240
So we don't corrupt others work.

320
00:20:26,060 --> 00:20:28,129
So here's some commands around branching.

321
00:20:28,189 --> 00:20:32,929
We have Git branch when we enter that into
our terminal or in her Git client again,

322
00:20:32,929 --> 00:20:36,709
this lists all of the branches in your
repository, and it also tells you what

323
00:20:36,709 --> 00:20:39,949
branch you're currently on Git checkout.

324
00:20:40,250 --> 00:20:43,520
And you can amend that with Git
checkout in your branch name.

325
00:20:43,580 --> 00:20:46,280
This command is used to switch
from one branch to another.

326
00:20:47,580 --> 00:20:49,445
Git checkout dash B.

327
00:20:49,625 --> 00:20:52,475
It actually creates a new
branch right then and there

328
00:20:52,475 --> 00:20:54,334
for you and you switched to it.

329
00:20:54,365 --> 00:20:59,074
So you would say Git checkout dash B
and then the name of your new branch.

330
00:20:59,405 --> 00:21:04,205
And then you'll be deposited right
on that new branch Git branch dash D

331
00:21:04,235 --> 00:21:06,034
deletes your current feature branch.

332
00:21:08,570 --> 00:21:11,510
And back to that client, you know,
press a button and you can name

333
00:21:11,510 --> 00:21:15,290
and create a branch in a matter
of seconds, you name the brand.

334
00:21:15,320 --> 00:21:17,750
What you, how you name the
branch is really up to you.

335
00:21:17,900 --> 00:21:20,780
But when we work together, we want
to make sure that we're consistent

336
00:21:20,780 --> 00:21:22,250
with what everyone else is doing.

337
00:21:22,550 --> 00:21:26,090
Sometimes agencies and organizations
might have parameters on naming

338
00:21:26,090 --> 00:21:29,060
conventions, like the task or
the ticket number and the name.

339
00:21:29,710 --> 00:21:34,000
Um, sometimes when you're working on, uh,
you know, contributing back to WordPress,

340
00:21:34,000 --> 00:21:38,350
you put the ticket, um, as your branch
name, you know, what, what ticket you're

341
00:21:38,350 --> 00:21:40,600
working on in the, in the track queue.

342
00:21:41,890 --> 00:21:42,250
Okay.

343
00:21:42,280 --> 00:21:44,470
So we're going to push it
now, push it real good.

344
00:21:44,470 --> 00:21:44,860
Right.

345
00:21:45,370 --> 00:21:50,260
Um, pushing refers to working with
others remotely, you know, at some point

346
00:21:50,260 --> 00:21:54,160
you want to share your modifications
or your additions that you made.

347
00:21:55,040 --> 00:21:58,370
With the team and to do this,
you have to push it upstream.

348
00:21:58,729 --> 00:22:01,100
Uh, you want to make
sure your branches ready.

349
00:22:01,399 --> 00:22:05,959
So first you do Git add that's
where you add one or more to

350
00:22:05,959 --> 00:22:07,699
staging one or more files to stay.

351
00:22:09,845 --> 00:22:15,554
Um, if you want to add all of them,
you do Git, add with a star or Git

352
00:22:15,554 --> 00:22:17,345
I'm sorry, Git ad with a period.

353
00:22:17,345 --> 00:22:20,825
And that adds all of your, all
of the files, but you can also

354
00:22:20,825 --> 00:22:24,815
add files one by one by saying,
Git, add, and then the file name.

355
00:22:24,825 --> 00:22:27,215
So say you're working on four
or five files, but you're

356
00:22:27,215 --> 00:22:28,925
not ready to add all of them.

357
00:22:28,925 --> 00:22:30,485
You can add them one by one.

358
00:22:32,495 --> 00:22:36,634
Uh, Git commit, uh, commit
changes to your local branch.

359
00:22:36,695 --> 00:22:42,485
Um, we have Git comat, uh, Git commit
dash M and then you put a message there,

360
00:22:42,485 --> 00:22:43,864
you know, that your commit message.

361
00:22:43,955 --> 00:22:48,780
Um, again, you know, um,
Use your messaging wisely.

362
00:22:48,840 --> 00:22:53,370
Sometimes agencies will want you to maybe
start with your ticket number or the, or

363
00:22:53,370 --> 00:22:57,720
the feature branch name, you know, so,
so really work with your team on commit

364
00:22:57,720 --> 00:23:02,100
messages as well, and then Git pull, you
know, fetch and Birch changes on that

365
00:23:02,100 --> 00:23:03,929
remote server to your working directory.

366
00:23:03,929 --> 00:23:06,450
Again, like I said, I referenced
this a lot because that's really

367
00:23:06,450 --> 00:23:07,889
important to make sure your.

368
00:23:08,419 --> 00:23:09,530
Current with others.

369
00:23:09,979 --> 00:23:12,290
Sometimes communication
is less than perfect.

370
00:23:12,290 --> 00:23:15,739
And a few people are working on the
same lines of code at the same time.

371
00:23:16,040 --> 00:23:19,189
You know, maybe someone's pushed theirs
up since the last time you checked,

372
00:23:19,219 --> 00:23:20,749
this really helps with conflicts.

373
00:23:21,290 --> 00:23:26,060
Um, and I talk about conflicts in the
next couple of slides and then Git pushed.

374
00:23:26,060 --> 00:23:28,489
You know, you send your changes
back to that main branch of

375
00:23:28,489 --> 00:23:30,530
the, of the remote repository.

376
00:23:31,639 --> 00:23:34,219
Here's another screenshot, you
know, and this one's highlighting,

377
00:23:34,310 --> 00:23:37,520
uh, the button in the user
interface for pushing and pulling.

378
00:23:38,405 --> 00:23:44,435
Uh, the dropdowns next to them allow for
more choices and gives useful information.

379
00:23:44,794 --> 00:23:49,534
I really recommend becoming familiar with
the tool tips and the information windows

380
00:23:49,534 --> 00:23:53,284
when you're first learning the process and
familiarizing yourself with the workflow.

381
00:23:53,585 --> 00:23:57,514
Often these tool tips show the
relevant, Git terminal commands to.

382
00:23:57,514 --> 00:24:01,054
So remember how I said that basic
knowledge you can gain some of that.

383
00:24:01,740 --> 00:24:05,040
More advanced knowledge by, you
know, hovering and dropping down

384
00:24:05,040 --> 00:24:09,000
and finding out those, uh, relevant,
Git, uh, terminal commands.

385
00:24:18,570 --> 00:24:20,070
So we're going to talk about merging.

386
00:24:22,064 --> 00:24:26,294
Before applying outside changes,
you should Git your own work in

387
00:24:26,294 --> 00:24:28,245
good shape and committed locally.

388
00:24:28,245 --> 00:24:32,804
So you're not, so it won't be
clobbered if there's any conflicts.

389
00:24:34,610 --> 00:24:37,140
So let's bring in all of
our work flow together.

390
00:24:37,190 --> 00:24:40,490
You know, it's more than just
pushing your code to a clean branch.

391
00:24:40,850 --> 00:24:45,260
Um, maybe your team is working
on the same code all at once.

392
00:24:45,530 --> 00:24:48,560
You know, it all needs to
come together and be merged.

393
00:24:48,890 --> 00:24:52,100
Um, so this Git remote command,
you know, the command is used to

394
00:24:52,100 --> 00:24:53,960
connect your local repository.

395
00:24:54,980 --> 00:24:55,639
Git pull.

396
00:24:55,639 --> 00:24:57,649
Remember I talk about that one a lot.

397
00:24:57,860 --> 00:25:01,010
We fetch and merger changes to the
remote server, you know, to our

398
00:25:01,010 --> 00:25:03,830
working directory and then Git merge.

399
00:25:04,310 --> 00:25:08,929
This command merges, the
specified branch history into

400
00:25:08,929 --> 00:25:13,520
the current branch and a client.

401
00:25:13,550 --> 00:25:18,320
You can look at logs and compare the
two instances in time of the same file.

402
00:25:18,350 --> 00:25:21,050
You know, it's color coded
green is for additions.

403
00:25:21,050 --> 00:25:22,280
Red is for taken out.

404
00:25:23,705 --> 00:25:27,155
You can compare different
branches in different instances

405
00:25:27,155 --> 00:25:28,745
in time with your client.

406
00:25:29,315 --> 00:25:35,075
Um, here's merging, you know,
there's a button for merging.

407
00:25:35,135 --> 00:25:38,765
It does magic behind the scenes
and pulls the code together.

408
00:25:39,215 --> 00:25:43,235
Um, while it can do some magic, it
doesn't want to make assumptions

409
00:25:43,235 --> 00:25:45,185
if there's a lot of conflict.

410
00:25:45,185 --> 00:25:48,155
And so you have to kind of work
through those conflicts yourself.

411
00:25:50,315 --> 00:25:52,445
So what do we do about
conflicts and commotion?

412
00:25:55,325 --> 00:25:59,254
I love this Twitter space.

413
00:25:59,285 --> 00:26:02,764
I am developer, and this is so true.

414
00:26:03,065 --> 00:26:03,935
We've been there.

415
00:26:03,965 --> 00:26:06,245
We just think it's going to
take a minute to clean up.

416
00:26:06,575 --> 00:26:08,405
You know, we've all said this before.

417
00:26:08,585 --> 00:26:09,305
They're famous.

418
00:26:09,305 --> 00:26:10,145
Last words.

419
00:26:10,175 --> 00:26:11,705
It will be a quick fix.

420
00:26:13,624 --> 00:26:17,705
But conflicts happen, you know, even
with the most senior developers, the

421
00:26:17,705 --> 00:26:22,384
most direct way to resolve a merge
conflict is to edit the conflicted file.

422
00:26:22,685 --> 00:26:24,574
Um, Git status.

423
00:26:24,574 --> 00:26:25,864
Remember that's my favorite one.

424
00:26:25,894 --> 00:26:28,924
You know, you list the files and
you've changed, and those that

425
00:26:28,924 --> 00:26:30,725
still need to be added or committed.

426
00:26:31,114 --> 00:26:33,044
Um, we use the Git diff command.

427
00:26:34,250 --> 00:26:39,260
Dif helps us find differences between the
states of the repository or the files.

428
00:26:39,590 --> 00:26:43,010
And this is useful in predicting
and preventing merge conflicts.

429
00:26:44,000 --> 00:26:48,800
We have Git logged dash dash merge where
we can view all of the merge conflicts

430
00:26:49,280 --> 00:26:53,389
and then Git push that's where we send
our changes back to the main branch

431
00:26:53,449 --> 00:26:56,000
of our lo of our remote repository.

432
00:26:58,070 --> 00:26:58,250
So.

433
00:26:58,999 --> 00:27:00,979
Here's a screenshot of the Git client.

434
00:27:00,979 --> 00:27:05,659
Again, you can see there's three versions
of the same code compared to each other.

435
00:27:05,719 --> 00:27:07,999
And this is the time to review and check.

436
00:27:08,779 --> 00:27:11,479
There are really two things you
can do with this information.

437
00:27:11,779 --> 00:27:15,979
You can decide not to merge,
or you can fix the conflicts.

438
00:27:17,719 --> 00:27:22,699
So when the decision is made not to
merge in the code, um, say your code

439
00:27:22,699 --> 00:27:24,299
just isn't playing nice together.

440
00:27:24,319 --> 00:27:27,139
Too many people have made
too many changes at once.

441
00:27:27,559 --> 00:27:27,769
So.

442
00:27:28,520 --> 00:27:33,140
We'll use a command, Git fetch
origin, this fetches the latest

443
00:27:33,230 --> 00:27:37,970
history from the server and it
points your local main branch.

444
00:27:39,240 --> 00:27:40,294
Git reset.

445
00:27:40,504 --> 00:27:45,935
And then, um, the commit, this command
undo all of the commits after the

446
00:27:45,935 --> 00:27:51,875
specified commit and preserves the
changes locally, Git reset dash hard

447
00:27:51,905 --> 00:27:56,975
with, um, the commit number, this
command discards all of the history

448
00:27:56,975 --> 00:27:58,655
and goes back to the specified.

449
00:28:00,840 --> 00:28:04,079
Then there are buttons to help you
with the nuclear option to, you

450
00:28:04,079 --> 00:28:08,759
know, push a button, but what's nice
is Git, clients are really polite.

451
00:28:08,789 --> 00:28:12,539
Um, they make sure we really want
to blow up or dissolve our work.

452
00:28:12,539 --> 00:28:16,399
So you can see in this screenshot,
you know, are you sure you want to do.

453
00:28:17,290 --> 00:28:19,300
Um, and it gives you that warning.

454
00:28:19,300 --> 00:28:20,679
So it's really easy to see.

455
00:28:20,679 --> 00:28:24,250
So, um, even if you're like really
comfortable on the command line, sometimes

456
00:28:24,250 --> 00:28:28,389
it's nice to Git back into that, Git
client on some of these more, uh, uh,

457
00:28:28,510 --> 00:28:34,660
with the merge conflicts and stuff,
web based version control platforms.

458
00:28:34,690 --> 00:28:35,620
These are things like.

459
00:28:36,620 --> 00:28:39,590
Uh, GitHub bit bucket, Git lab.

460
00:28:39,800 --> 00:28:44,720
These are platforms that provide us
with a rad visual interface, which also

461
00:28:44,720 --> 00:28:49,430
can really help us track and manage
our version control projects locally.

462
00:28:50,060 --> 00:28:53,600
Um, you know, the workflow is kind
of the same, you know, you create

463
00:28:53,600 --> 00:28:56,450
a branch, you work in a space
away from that production site.

464
00:28:56,780 --> 00:29:00,290
You add commits, revise the
code and add them to branch.

465
00:29:00,410 --> 00:29:01,760
You create pull requests.

466
00:29:01,780 --> 00:29:05,750
This starts the process of code review
and an interface for everyone to see,

467
00:29:06,320 --> 00:29:10,010
um, and then code reviews where we
discuss and collaborate everything, you

468
00:29:10,010 --> 00:29:11,780
know, because maybe I made a change.

469
00:29:11,840 --> 00:29:15,200
Um, but when made a different change
and we need to talk about those things.

470
00:29:16,535 --> 00:29:19,385
And then merging is where we move
our code into the main branch.

471
00:29:20,045 --> 00:29:24,875
Uh, here is a screenshot of a GitHub
repository, you know, um, this is

472
00:29:24,875 --> 00:29:26,285
mine cause I like to be polite.

473
00:29:26,645 --> 00:29:29,795
Uh, you can see that the files are listed.

474
00:29:29,825 --> 00:29:34,595
You can see, um, some of the things
that I've changed over time, you

475
00:29:34,595 --> 00:29:36,215
know, there's buttons across the top.

476
00:29:36,245 --> 00:29:39,185
It's that interface for
my code repository online.

477
00:29:40,685 --> 00:29:42,425
And this is a pull request.

478
00:29:42,455 --> 00:29:45,995
Someone looked at my report and said,
oh, something's not quite right.

479
00:29:46,265 --> 00:29:51,275
So they put in a pull request, which
is like, kind of like a merge request.

480
00:29:51,575 --> 00:29:56,255
Um, and with the click of a button,
I'm able to do that, uh, online.

481
00:29:58,620 --> 00:30:01,650
A local server plays a
vital role for developers.

482
00:30:01,680 --> 00:30:06,540
The purpose of a development environment
is to have a place that allows development

483
00:30:06,600 --> 00:30:12,000
and testing on a local machine without
the concerns of losing internet

484
00:30:12,000 --> 00:30:17,430
connection or accidentally creating
temporary security holes or constantly

485
00:30:17,430 --> 00:30:22,200
uploading files, a local environment
is really a place for developers or

486
00:30:22,200 --> 00:30:24,560
designers to test everything they want.

487
00:30:24,740 --> 00:30:31,790
Without worrying about it affecting any
end users or content editors working

488
00:30:31,790 --> 00:30:37,459
on the live website and much like Git
there some prerequisites that go involved

489
00:30:37,459 --> 00:30:41,659
with, you know, uh, setting up your
local host environment at a minimum.

490
00:30:41,780 --> 00:30:43,399
Uh, you need a PHP server.

491
00:30:43,429 --> 00:30:46,879
This is for WordPress PHP
server, a database server,

492
00:30:47,270 --> 00:30:50,310
um, and PHP for WordPress.

493
00:30:51,139 --> 00:30:54,260
You also need a computer that's
equipped for the task, you know?

494
00:30:55,460 --> 00:30:58,490
Some of us are still on older
machines, not on our M ones.

495
00:30:58,490 --> 00:31:01,790
You know, if you're using a Mac, you
want to make sure, you know, some

496
00:31:01,790 --> 00:31:04,910
of the minimum requirements might
be something like, you know, a two

497
00:31:04,910 --> 00:31:11,120
core 86 compact press processor with
maybe four gigabytes of memory or

498
00:31:11,150 --> 00:31:15,830
gigabytes of Ram, and then, you know,
25 gigabytes of available disc space.

499
00:31:16,160 --> 00:31:19,550
But all these local hosts, when you set
them up will tell you what they prefer.

500
00:31:19,850 --> 00:31:23,750
Um, some of the more
complex agents might be.

501
00:31:24,514 --> 00:31:25,985
To work at an optimum.

502
00:31:26,284 --> 00:31:28,385
Um, you might need an
eight core processor.

503
00:31:28,445 --> 00:31:31,655
So do your research when selecting
which service you want to use,

504
00:31:33,215 --> 00:31:36,455
and then a local server plays a
pivotal part for most of all offers.

505
00:31:36,455 --> 00:31:37,804
It really allows.

506
00:31:38,135 --> 00:31:42,605
And I like to iterate this, reiterate
it, it allows development and testing

507
00:31:42,605 --> 00:31:46,715
on a local machine without the
concerns of an internet connection.

508
00:31:48,830 --> 00:31:51,860
I've listed some options for
setting up local servers.

509
00:31:51,950 --> 00:31:56,240
Uh, you can have, you know, Linux, you
can use Mac iOS, windows development.

510
00:31:56,450 --> 00:32:00,770
You can use a virtual machine
development of virtual machines.

511
00:32:00,770 --> 00:32:03,680
Sometimes you'll hear
the, uh, them called VMs.

512
00:32:03,980 --> 00:32:08,750
It's a full self-contained
server running in its own

513
00:32:08,750 --> 00:32:10,490
environment and operating system.

514
00:32:11,780 --> 00:32:15,320
On your machine kind of separate
from your machine and then

515
00:32:15,350 --> 00:32:17,180
Docker development environments.

516
00:32:17,180 --> 00:32:21,710
Docker's a great tool, um, for local
development environments as well because

517
00:32:21,770 --> 00:32:27,170
of the small print, a small footprint
it has, and the fast startup times.

518
00:32:27,200 --> 00:32:30,710
So this is like, you might hear
it called containerized develop.

519
00:32:32,560 --> 00:32:34,060
So why have a local server?

520
00:32:34,090 --> 00:32:37,330
You know, there are a few reasons
that pretty much require you to

521
00:32:37,330 --> 00:32:39,250
build your web stuff locally.

522
00:32:39,670 --> 00:32:42,910
Um, you might have limited
access to the client server.

523
00:32:42,910 --> 00:32:46,030
You know, you're building a website
or an app for someone else, and you

524
00:32:46,030 --> 00:32:48,250
don't have access to their web server.

525
00:32:48,400 --> 00:32:52,150
You don't have access to
their private repository.

526
00:32:52,900 --> 00:32:58,370
Uh, If you're building a new version of an
existing website or application, you know,

527
00:32:58,370 --> 00:33:02,990
which means that you don't want to mess
around with production, um, while you're

528
00:33:02,990 --> 00:33:07,670
tinkering and experimenting and possibly
making mistakes with the new code.

529
00:33:08,390 --> 00:33:11,000
So it really allows for more
experimentation without the

530
00:33:11,000 --> 00:33:12,920
risk of blowing up the library.

531
00:33:14,610 --> 00:33:18,330
And then no local internet
connection is required.

532
00:33:18,330 --> 00:33:21,449
You don't need a web hosting service,
or even an internet connection.

533
00:33:21,480 --> 00:33:24,600
You know, everything runs
conveniently on your computer.

534
00:33:24,990 --> 00:33:28,080
You can concentrate on coding
and leaving the deployment of

535
00:33:28,080 --> 00:33:29,370
the site until you're ready.

536
00:33:29,370 --> 00:33:32,580
You know, you can work while you're
waiting for your kids at gymnastics.

537
00:33:33,180 --> 00:33:36,510
While you're waiting in line for the gym
membership, you know, things like that.

538
00:33:37,020 --> 00:33:39,660
And you can really customize
your setup, you know, test your

539
00:33:39,660 --> 00:33:41,370
development before going live.

540
00:33:41,370 --> 00:33:45,180
It really takes away that risk
of building new features and

541
00:33:45,180 --> 00:33:47,820
makes development less stressful.

542
00:33:48,900 --> 00:33:51,960
And then there's the idea
of just having more control.

543
00:33:51,990 --> 00:33:53,520
And you can tell I'm excited about this.

544
00:33:53,580 --> 00:33:58,920
Um, particularly when you're debugging,
you know, say you're new and you don't

545
00:33:58,920 --> 00:34:03,845
know what you're doing, you know, It's
sometimes helpful to have more control

546
00:34:03,845 --> 00:34:08,525
over your environment, you know, um,
and have special tools in place that

547
00:34:08,525 --> 00:34:10,235
you don't want on your production site.

548
00:34:10,235 --> 00:34:15,155
Cause it might bog bog it
down, but the good news is,

549
00:34:15,155 --> 00:34:16,235
you know, those requirements.

550
00:34:16,235 --> 00:34:19,175
We mentioned a couple of slides
back, you know, the web server, a

551
00:34:19,185 --> 00:34:21,335
database server and the PHP part.

552
00:34:23,314 --> 00:34:27,395
There are a lot of local hosts that
can do all of that work for us.

553
00:34:27,395 --> 00:34:29,044
And we don't have to set it up ourselves.

554
00:34:29,044 --> 00:34:34,114
You know, usually some of these hosts will
come with a web server, a data management

555
00:34:34,355 --> 00:34:36,484
system to run on the web server.

556
00:34:36,665 --> 00:34:39,395
They have server side
programming languages.

557
00:34:39,484 --> 00:34:43,294
Um, they often have interfaces
for controlling the web server,

558
00:34:43,294 --> 00:34:44,944
you know, starting stopping.

559
00:34:45,795 --> 00:34:49,634
Pausing, and then an interface
for accessing and manipulating

560
00:34:49,634 --> 00:34:52,904
the database, which we don't
always have a more working online.

561
00:34:54,884 --> 00:34:56,685
And this is new.

562
00:34:56,835 --> 00:35:01,415
Uh, I work in the Drupal space
a lot and we work with, uh, Git

563
00:35:01,545 --> 00:35:07,365
pod and I spun up a WordPress
site, uh, yesterday using Git pod.

564
00:35:09,255 --> 00:35:13,995
It's a new browser based environment
that allows for collaboration.

565
00:35:14,674 --> 00:35:15,845
It's Git pod.

566
00:35:16,145 --> 00:35:20,404
It's really straightforward to spin up an
automated dev environment in the cloud.

567
00:35:20,404 --> 00:35:22,145
And it doesn't take very much time.

568
00:35:22,595 --> 00:35:27,275
It's integrated with vs code, or you
can use a JetBrains IDE within its

569
00:35:27,275 --> 00:35:30,245
environment, and it's very customizable.

570
00:35:30,515 --> 00:35:31,924
And what's super nice about this.

571
00:35:31,924 --> 00:35:36,154
Git pod is you can share the URL with
somebody and you can see them working

572
00:35:36,154 --> 00:35:38,765
in the code online at the same time.

573
00:35:41,195 --> 00:35:43,355
And that is the end of the presentation.

574
00:35:43,355 --> 00:35:45,515
So I want to thank everybody again.

575
00:35:45,575 --> 00:35:49,445
Um, and Volkswagen Chick across
all of the media and that's spelled

576
00:35:49,475 --> 00:35:54,995
V O L K S W A G E N C H I C K.

577
00:35:55,055 --> 00:35:56,945
It's really long, but you can do it.

578
00:35:58,220 --> 00:36:01,549
And then, um, when I share that
slide deck, I do have some really

579
00:36:01,670 --> 00:36:07,670
good information on, uh, resources
on Git, and I'll actually put more

580
00:36:07,670 --> 00:36:10,460
resources up there because I want to
put that, Git pawed link of there.

581
00:36:10,460 --> 00:36:12,980
Cause it's very exciting
local environment.

582
00:36:15,880 --> 00:36:18,340
And with that, I'll stop sharing.

583
00:36:18,340 --> 00:36:20,710
And I'm not sure if we're
going to do questions.

584
00:36:20,740 --> 00:36:24,880
Matt Graham: Um, well, I mean,
I have a few questions for you.

585
00:36:25,720 --> 00:36:32,470
Um, so first of all, I think you need to
be in charge of karaoke if that's ever

586
00:36:32,470 --> 00:36:38,140
a thing for, for WordFest, because then
you could be like a combination of like

587
00:36:38,500 --> 00:36:44,029
a tech version of Weird Al with your,
your, with your eighties references.

588
00:36:44,029 --> 00:36:45,800
Cause I started grooving to those songs.

589
00:36:47,480 --> 00:36:50,270
AmyJune Hineline: I actually
do another presentation in the

590
00:36:50,270 --> 00:36:53,330
accessibility community where I
talk about alternative texts and I

591
00:36:53,330 --> 00:36:55,490
use eighties imagery for that too.

592
00:36:56,435 --> 00:36:57,154
Super fun.

593
00:36:58,654 --> 00:37:03,064
Matt Graham: So, um, one of the questions
that, uh, I mean, just from the title

594
00:37:03,064 --> 00:37:08,944
of, of your, of your talk, I do a lot
of, well, I'm a freelancer, but I also

595
00:37:08,944 --> 00:37:11,645
work with agencies as a freelancer.

596
00:37:11,975 --> 00:37:17,705
So do you have any kind of maybe like
tips or tricks for those of us who

597
00:37:18,095 --> 00:37:20,194
kind of straddle the line a little bit?

598
00:37:21,725 --> 00:37:23,254
AmyJune Hineline: Well, no.

599
00:37:23,975 --> 00:37:27,065
'cause you should know, like,
you know, you might have your own

600
00:37:27,065 --> 00:37:30,755
workflow, but again, like working with
agencies is different, you know, and

601
00:37:30,755 --> 00:37:32,404
every agency is a little different.

602
00:37:32,404 --> 00:37:36,965
So learning their workflow, you know,
uh, I think could be more complicated

603
00:37:36,965 --> 00:37:40,295
as a freelancer working with different
organizations, because some people

604
00:37:40,295 --> 00:37:43,654
might name their branches different or
there might be using different local

605
00:37:43,654 --> 00:37:47,585
hosts or they might be using different
version control systems, you know?

606
00:37:47,585 --> 00:37:47,944
So.

607
00:37:49,339 --> 00:37:52,700
I, I think that complicates
being a freelancer when you work

608
00:37:52,700 --> 00:37:55,460
with agencies, because you have
to learn everyone's workflow.

609
00:37:55,879 --> 00:37:58,370
So I don't have any tips
for you except for okay.

610
00:37:58,490 --> 00:37:59,210
Matt Graham: Well, that's fair.

611
00:37:59,240 --> 00:37:59,839
That's fair.

612
00:37:59,899 --> 00:38:01,970
I, you know, I figure
I'd take a shot at it.

613
00:38:02,569 --> 00:38:03,379
Um, yeah.

614
00:38:03,410 --> 00:38:04,759
Cause it's, it's true.

615
00:38:04,759 --> 00:38:06,830
Like you're, you're
you're right on the money.

616
00:38:06,830 --> 00:38:08,299
It's it is the wild west.

617
00:38:08,870 --> 00:38:10,100
And I mean, depending on.

618
00:38:11,165 --> 00:38:17,555
Uh, as a freelancer, depending on how
much time you're given you might be

619
00:38:17,825 --> 00:38:24,045
doing it by the book as, as an agency
would, or you might just be like, oh,

620
00:38:24,065 --> 00:38:25,865
I've got to code this as fast as I can.

621
00:38:26,825 --> 00:38:29,585
So yeah, I mean, it's, it's, uh.

622
00:38:30,855 --> 00:38:31,674
AmyJune Hineline: I think part of it.

623
00:38:32,420 --> 00:38:35,960
That's hard, especially if you've been
a freelancer for so long as you don't

624
00:38:35,960 --> 00:38:37,730
have that accountability with the team.

625
00:38:37,730 --> 00:38:38,060
Right.

626
00:38:38,090 --> 00:38:41,810
So you're like, take those shortcuts
or you name the branch, this

627
00:38:41,810 --> 00:38:43,880
is a branch, or this is a fix.

628
00:38:43,880 --> 00:38:46,730
And I, you know, instead of
like doing your commit messages.

629
00:38:46,730 --> 00:38:47,030
Right.

630
00:38:47,030 --> 00:38:52,250
So, um, there's definitely like
more accountability, you know, when

631
00:38:52,250 --> 00:38:53,480
you're working with a team, I think.

632
00:38:53,990 --> 00:38:54,860
Matt Graham: Yeah, absolutely.

633
00:38:55,220 --> 00:39:01,280
Well, and it's funny too, cause like I've
also been the only developer in an agency.

634
00:39:02,075 --> 00:39:07,174
Uh, and that's almost as much a wild
west as it, uh, as being a freelancer.

635
00:39:07,174 --> 00:39:12,575
So it's kind of a, again, straddling
the line, but, you know, and you

636
00:39:12,575 --> 00:39:13,835
still Git the same kind of thing.

637
00:39:14,015 --> 00:39:15,245
Am I going to do this right?

638
00:39:15,335 --> 00:39:19,205
Or if this do you know, six
days before actually before

639
00:39:19,205 --> 00:39:20,475
I can physically Git it done.

640
00:39:20,495 --> 00:39:27,035
So, um, I think, um, yeah, uh,
yeah, it doesn't seem like we're

641
00:39:27,035 --> 00:39:28,924
Gitting any meeting, any questions.

642
00:39:28,955 --> 00:39:29,194
Um,

643
00:39:30,275 --> 00:39:32,884
Rachel Winchester: Well, I guess I
have a follow-up question to what

644
00:39:32,884 --> 00:39:35,505
you just asked Matt I'm AmyJune.

645
00:39:35,525 --> 00:39:39,545
Do you have any experience, I guess,
uh, consulting and, and helping people

646
00:39:39,545 --> 00:39:44,285
transition from, uh, freelance development
into working for a larger agency?

647
00:39:45,125 --> 00:39:49,865
AmyJune Hineline: No, but I
have experience contributing

648
00:39:49,865 --> 00:39:53,315
back to open source, which is
sort of that same workflow.

649
00:39:53,315 --> 00:39:56,884
You know, we work with others, you
know, of most of the time, when we think

650
00:39:56,884 --> 00:40:00,875
about like contributing back to work,
uh, WordPress, we have the track queue,

651
00:40:00,904 --> 00:40:03,215
which kind of mirrors, agency workflow.

652
00:40:03,365 --> 00:40:04,424
We all work together.

653
00:40:04,445 --> 00:40:06,575
We submit tickets, we're collaborative.

654
00:40:06,575 --> 00:40:07,715
We do merge requests.

655
00:40:07,715 --> 00:40:09,245
We make patches.

656
00:40:09,395 --> 00:40:17,800
So I do have that kind of experience, but,
um, I don't typically, uh, uh, That's like

657
00:40:18,140 --> 00:40:20,510
everyone has their own skills and roles.

658
00:40:20,510 --> 00:40:20,840
Right.

659
00:40:20,840 --> 00:40:24,110
And that's the role of the
technical manager or the technical

660
00:40:24,110 --> 00:40:26,240
project manager, which I am not.

661
00:40:33,050 --> 00:40:33,710
Matt Graham: All right.

662
00:40:33,890 --> 00:40:37,310
Um, well, I guess we'll wrap this up.

663
00:40:37,580 --> 00:40:42,930
Um, I want to thank our sponsors,
uh, for this, for WordFest.

664
00:40:42,950 --> 00:40:49,930
It's Bluehost, Cloudways, GoDaddy
Pro, Nexcess, Yoast, and weglot,

665
00:40:50,945 --> 00:40:53,705
please be sure to visit their
tents and chat with them there.

666
00:40:54,075 --> 00:40:55,805
You might even win a prize.

667
00:40:57,005 --> 00:41:00,185
So don't forget to get your photo
snapped in the photo booth and tweet

668
00:41:00,185 --> 00:41:03,635
it out with the hashtag WordFest Live.

669
00:41:04,985 --> 00:41:08,885
Also thank you to our media
partners and our micro sponsor.

670
00:41:10,595 --> 00:41:17,695
So in the community tent for the next,
uh, 53 minutes, uh, we have Cloudways,

671
00:41:18,095 --> 00:41:22,445
uh, they're delivering launch with words,
tent takeover with Bridget Willard.

672
00:41:23,165 --> 00:41:27,545
Um, so there is a one hour break in
the stage two sec schedule right now.

673
00:41:27,965 --> 00:41:33,424
So head over to the community tent,
we'll be back on the hour at 01:00 UTC.

674
00:41:34,444 --> 00:41:37,415
You make all our Big Orange Hearts full.

